<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://loudandabrasive.com/feed.xml" rel="self" type="application/atom+xml" /><link href="http://loudandabrasive.com/" rel="alternate" type="text/html" /><updated>2021-02-09T05:28:00+00:00</updated><id>http://loudandabrasive.com/feed.xml</id><title type="html">Loud &amp;amp; Abrasive: Patrick McVeety-Mill</title><subtitle>Patrick McVeety-Mill's blog and portfolio: Loud &amp; Abrasive. Featuring guides, art samples, and thoughts and commentaries on development and the world around us.
</subtitle><author><name>Patrick McVeety-Mill</name></author><entry><title type="html">Reflections on Leading a Greenfield Project</title><link href="http://loudandabrasive.com/reflections-on-leading-a-greenfield-project" rel="alternate" type="text/html" title="Reflections on Leading a Greenfield Project" /><published>2021-02-01T21:22:00+00:00</published><updated>2021-02-01T21:22:00+00:00</updated><id>http://loudandabrasive.com/reflections-on-leading-a-greenfield-project</id><content type="html" xml:base="http://loudandabrasive.com/reflections-on-leading-a-greenfield-project">&lt;p&gt;Today is my first day ‚Äòoff‚Äô after leading a development project for a bit more than a year. Besides being a pretty long time for consulting, this was unique in being the first &lt;em&gt;greenfield&lt;/em&gt; project I‚Äôve tech-led. Overall it was a success, but as in all things, there were lots of lessons learned I am now reflecting on.&lt;/p&gt;

&lt;!--more--&gt;

&lt;blockquote&gt;
  &lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Greenfield_project#Software_development&quot;&gt;greenfield project&lt;/a&gt; is new development on a clean and to-be-defined slate, as compared to &lt;a href=&quot;https://en.wikipedia.org/wiki/Brownfield_(software_development)&quot;&gt;brownfield development&lt;/a&gt;: new development on existing or legacy software.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;time-and-opportunity&quot;&gt;Time and Opportunity&lt;/h2&gt;

&lt;p&gt;Being a tech lead requires &lt;a href=&quot;https://podcasts.apple.com/us/podcast/ep-7-perspectives-on-role-splitting-with-lola-mullen/id1498262181?i=1000493201497&quot;&gt;wearing many hats&lt;/a&gt; to meet the needs of any project. For greenfield, &lt;strong&gt;time management&lt;/strong&gt; is as-if-not-more important. There is a disastrous temptation (I fell prey to at times) to write more code yourself, scaffolding patterns or implementing important or preliminary features. For some teams, this may work out; and delegation is great, if not necessary, for ‚Äòcreating‚Äô time for yourself. But no matter what, implementing a üÜí feature or a key piece of infrastructure from top-to-bottom takes time and attention away from steering the ship and establishing the broader landscape of the new system.&lt;/p&gt;

&lt;p&gt;Besides an increased desire to do-it-yourself, there is a special risk of analysis paralysis when designing &lt;strong&gt;new&lt;/strong&gt; systems to requirements. A blank canvas &lt;em&gt;should&lt;/em&gt; be a boon: ‚ÄúFinally a chance to have it my way!‚Äù Science, though, says that &lt;a href=&quot;https://www.npr.org/2016/11/29/503594516/in-praise-of-mess-why-disorder-may-be-good-for-us&quot;&gt;constraints help with creativity&lt;/a&gt;, and existing architecture or widespread ugly patterns can make the path ahead more obvious compared to the near-infinite possibility of greenfield dev. Take the opportunity to explore, but time-box your spikes, and favor pragmatism over ideal perfection.&lt;/p&gt;

&lt;h2 id=&quot;team-guidance-guardrails&quot;&gt;Team, Guidance, Guardrails&lt;/h2&gt;

&lt;p&gt;Autonomy is critical for software developers, for morale, execution, and growth. However, totally unbridled developers are closer to wandering bears than a fluid herd of wild horses. Assuming your team shares your brain is an easy pitfall. Capable developers can replicate implementation patterns in an existing codebase, and more experienced devs may understand your designs without much direction, but many folks will need more guidance to start from new files and independently arrive at a single vibe for the codebase. &lt;a href=&quot;https://betterway.headspring.com/development-guidelines/&quot;&gt;Shared languages&lt;/a&gt; or &lt;a href=&quot;https://github.com/jbogard/ContosoUniversityDotNetCore-Pages&quot;&gt;pattern blueprints&lt;/a&gt; go a long way when you‚Äôre at step 0.&lt;/p&gt;

&lt;p&gt;Code reviews are a must, but for features that introduce new patterns, if you wait for the pull request to course-correct, it‚Äôs too late: You leave some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Won't Fix&lt;/code&gt; comments (for yourself) and reluctantly click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Merge&lt;/code&gt; to the sound of the project manager‚Äôs tapping foot. The feature is functional, but hard to navigate should a bug arise, and if it gets copied a month later, is a new anti-pattern.&lt;/p&gt;

&lt;p&gt;I eventually moved beyond talking through the technical and business needs of a feature to including pseudocode sketches in ticket descriptions when I had a workable pattern in mind. You might also ask for a similar sketch before work gets too far, or do daily or mid-day check-ins to guide the &lt;em&gt;shape&lt;/em&gt; of new code. Be careful not to cross over into micro-management, though.&lt;/p&gt;

&lt;h2 id=&quot;communication-artifacts&quot;&gt;Communication Artifacts&lt;/h2&gt;

&lt;p&gt;When anyone leaves a project, there is a scramble to dump their unique head-knowledge into something more permanent. I was pleasantly surprised with the amount of documentation already written. Even outdated wiki pages were &lt;em&gt;mostly&lt;/em&gt; right, and it takes less time to make a correction or expand on a bullet than to write from scratch. Documenting-as-you-go is so valuable, sometimes I even left a comment on PRs: ‚ÄúMUST: Add a page documenting how to use this [new thing].‚Äù&lt;/p&gt;

&lt;p&gt;Besides the obvious how-tos and explainers, I left a long list of weak-spots, areas of improvement, and refactoring opportunities that were bouncing around my head and not &lt;em&gt;quite&lt;/em&gt; ready for a ticket. That list would have been valuable to share earlier, if only to allow the team to side-step falling into or digging those holes deeper.&lt;/p&gt;

&lt;p&gt;The colleague who took over for me asked a great question that I was less prepared for: ‚ÄúWhat are your unlabeled duties?‚Äù The team &lt;em&gt;saw me&lt;/em&gt; review code, add details to tickets, meet with clients, and coach them. There were also less visible tasks, regular or one-off, that I was responsible for. Here, my daily working notes became a good resource, but were only so detailed. I wracked my brain for a few tasks, but now that I‚Äôm gone we can only hope I remembered everything critical. Being explicit about role-duties is already important for setting clear expectations, but here going into extra detail would‚Äôve been a confidence boost.&lt;/p&gt;

&lt;h2 id=&quot;parting-thoughts&quot;&gt;Parting Thoughts&lt;/h2&gt;

&lt;p&gt;There are lots of smaller, less helpful things to think: ‚ÄúI wish I had made the domain tighter,‚Äù ‚ÄúWow those test helpers are a wreck,‚Äù ‚ÄúI could have documented the naming conventions, to help &lt;strong&gt;me&lt;/strong&gt; be consistent‚Äù My code review checklist grew exponentially over the course of the project, and in reflecting there are still things that slipped by me. But I take comfort that all these are small things, and for every little error or could‚Äôve-been-better there is a much larger value to the end user and their doings.&lt;/p&gt;</content><author><name>Patrick McVeety-Mill</name></author><category term="Development" /><category term="commentary" /><category term="process" /><summary type="html">Today is my first day ‚Äòoff‚Äô after leading a development project for a bit more than a year. Besides being a pretty long time for consulting, this was unique in being the first greenfield project I‚Äôve tech-led. Overall it was a success, but as in all things, there were lots of lessons learned I am now reflecting on.</summary></entry><entry><title type="html">Updated Site Layout</title><link href="http://loudandabrasive.com/new-layout" rel="alternate" type="text/html" title="Updated Site Layout" /><published>2020-12-31T07:32:00+00:00</published><updated>2020-12-31T07:32:00+00:00</updated><id>http://loudandabrasive.com/new-layout</id><content type="html" xml:base="http://loudandabrasive.com/new-layout">&lt;p&gt;You may notice the site looks like a little different! It had been a minute since I had checked my styles, and it was high time for a refresh. This go around is a bit flashier, a bit more &lt;em&gt;timeless&lt;/em&gt;, and a bit more ‚Äúme.‚Äù While restyling, I took the opportunity to brush up on Flexbox and shed the CSS library I was using. Besides visual touch ups, there‚Äôs been some restructuring:&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;posts are now split by category between &lt;a class=&quot;vermilion&quot; href=&quot;/tech&quot;&gt;&lt;strong&gt;tech&lt;/strong&gt;&lt;/a&gt; and &lt;a class=&quot;orange&quot; href=&quot;/life&quot;&gt;&lt;strong&gt;life&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;but still all mashed up in the homepage&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a class=&quot;citron&quot; href=&quot;/arts&quot;&gt;&lt;strong&gt;art pieces&lt;/strong&gt;&lt;/a&gt; are now posts, also by category
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;and also all mashed into the homepage&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the &lt;strong&gt;projects&lt;/strong&gt; page is gone
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;but lives on in the commit history&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, all the posts live together in the homepage, or more organized in their respective category pages. In the coming months expect to see the typical technical posts be joined by more art postings, personal essays, and other bullshit. Thanks for reading.&lt;/p&gt;

&lt;p&gt;See you soon,
&lt;br /&gt;&lt;span style=&quot;font: oblique 1.75em 'Vibur', sans-serif&quot;&gt;Patrick&lt;/span&gt;&lt;/p&gt;</content><author><name>Patrick McVeety-Mill</name></author><category term="Announcement" /><summary type="html">You may notice the site looks like a little different! It had been a minute since I had checked my styles, and it was high time for a refresh. This go around is a bit flashier, a bit more timeless, and a bit more ‚Äúme.‚Äù While restyling, I took the opportunity to brush up on Flexbox and shed the CSS library I was using. Besides visual touch ups, there‚Äôs been some restructuring:</summary></entry><entry><title type="html">Securing Cloud Infrastructure with Azure Managed Identities</title><link href="http://loudandabrasive.com/securing-cloud-infrastructure-with-azure-managed-identities" rel="alternate" type="text/html" title="Securing Cloud Infrastructure with Azure Managed Identities" /><published>2020-09-22T15:48:00+00:00</published><updated>2020-09-22T15:48:00+00:00</updated><id>http://loudandabrasive.com/securing-cloud-infrastructure-with-azure-managed-identities</id><content type="html" xml:base="http://loudandabrasive.com/securing-cloud-infrastructure-with-azure-managed-identities">&lt;p&gt;Of the Azure features I‚Äôve becomes more acquainted with these past couple years, &lt;strong&gt;Managed Identities&lt;/strong&gt; are one of my favorites. Managed Identities are system-managed service principals that allow for a level of security control I hadn‚Äôt considered before, where keys and passwords can be ‚Äòeliminated‚Äô or rotated so frequently that &lt;strong&gt;no human&lt;/strong&gt; has (at-ready) access to resources, without requiring (even automated) code or configuration changes for applications. They are &lt;em&gt;super&lt;/em&gt; easy to set up in .NET Core, and I recently layed out how for Headspring‚Äôs ‚ÄúDeveloper Corner‚Äù&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://headspring.com/2020/09/22/better-than-passwords-securing-cloud-infrastructure-with-azure-managed-identities/&quot;&gt;Read the whole article at Headspring.com&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;https://github.com/pmcvtm/azureference-app&quot;&gt;Check out the sample app on Github&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name>Patrick McVeety-Mill</name></author><category term="Cloud" /><category term="azure" /><category term="security" /><category term="devops" /><summary type="html">Of the Azure features I‚Äôve becomes more acquainted with these past couple years, Managed Identities are one of my favorites. Managed Identities are system-managed service principals that allow for a level of security control I hadn‚Äôt considered before, where keys and passwords can be ‚Äòeliminated‚Äô or rotated so frequently that no human has (at-ready) access to resources, without requiring (even automated) code or configuration changes for applications. They are super easy to set up in .NET Core, and I recently layed out how for Headspring‚Äôs ‚ÄúDeveloper Corner‚Äù Read the whole article at Headspring.com and Check out the sample app on Github</summary></entry><entry><title type="html">Presenting: OK Human</title><link href="http://loudandabrasive.com/presenting-ok-human" rel="alternate" type="text/html" title="Presenting: OK Human" /><published>2019-12-17T07:32:00+00:00</published><updated>2019-12-17T07:32:00+00:00</updated><id>http://loudandabrasive.com/presenting-ok-human</id><content type="html" xml:base="http://loudandabrasive.com/presenting-ok-human">&lt;p&gt;I am very happy to announce that I am the host of Headspring‚Äôs new podcast &lt;em&gt;OK Human&lt;/em&gt;, an exploration of technology, developing, and consulting through the lenses of humanity and emotion. Look forward to discussions on work strategy, organization, empathy, and how change can impact us as people while we make (or support making) software.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;You can catch the first episode, featuring coworker and pal &lt;a href=&quot;https://twitter.com/yaradhye&quot;&gt;Yogi Aradhye&lt;/a&gt; talking with me about ‚ÄúDeveloper Empathy‚Äù in the grand scheme on &lt;a href=&quot;https://headspring.com/insights/podcast/&quot;&gt;headspring.com/podcast/&lt;/a&gt;, along with all future episodes. You can also listen with this link, pop it into your favorite app, or subscribe to the RSS feed from this widget:&lt;/p&gt;

&lt;iframe src=&quot;https://www.buzzsprout.com/844789/2612749-ep-1-developer-empathy-with-yogi-aradhye?client_source=small_player&amp;amp;iframe=true&amp;amp;referrer=https://www.buzzsprout.com/844789/2612749-ep-1-developer-empathy-with-yogi-aradhye.js?container_id=buzzsprout-player-2612749&amp;amp;player=small&quot; scrolling=&quot;no&quot; title=&quot;OK Human, Ep. 1: Developer Empathy with Yogi Aradhye&quot; width=&quot;100%&quot; height=&quot;200&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Be sure to like, subscribe, and review OK Human on whatever platform you get podcasts.&lt;/p&gt;

&lt;p&gt;See you soon,
&lt;br /&gt;&lt;span style=&quot;font: oblique 1.75em 'Vibur', sans-serif&quot;&gt;Patrick&lt;/span&gt;&lt;/p&gt;</content><author><name>Patrick McVeety-Mill</name></author><category term="Announcement" /><summary type="html">I am very happy to announce that I am the host of Headspring‚Äôs new podcast OK Human, an exploration of technology, developing, and consulting through the lenses of humanity and emotion. Look forward to discussions on work strategy, organization, empathy, and how change can impact us as people while we make (or support making) software.</summary></entry><entry><title type="html">Database Migrations For Azure SQL Elastic Pools Using RoundhousE</title><link href="http://loudandabrasive.com/roundhouse-db-migrations-azure-elastic-pools" rel="alternate" type="text/html" title="Database Migrations For Azure SQL Elastic Pools Using RoundhousE" /><published>2019-10-15T09:24:00+00:00</published><updated>2019-10-15T09:24:00+00:00</updated><id>http://loudandabrasive.com/roundhouse-db-migrations-azure-elastic-pools</id><content type="html" xml:base="http://loudandabrasive.com/roundhouse-db-migrations-azure-elastic-pools">&lt;p&gt;Databases are important for most applications, but keeping their schemas consistent across versions and environments can become a sticky date pudding without proper care. Tools like &lt;a href=&quot;https://github.com/chucknorris/roundhouse&quot;&gt;RoundhousE&lt;/a&gt; provide streamlined, repeatable, script-based migrations and work like a charm out of the box. If using the very cool and atmospheric &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/sql-database/sql-database-elastic-pool&quot;&gt;Azure SQL Elastic Pools&lt;/a&gt;, however, the default behavior lands us adjacent to the pool, not in it. Let‚Äôs not be hasty to abandon database host nor migrator; it‚Äôs easy to correct this with little configuration. &lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;not-the-desired-databases&quot;&gt;Not The Desired Databases&lt;/h2&gt;

&lt;p&gt;RoundhousE is kind to its users and &lt;a href=&quot;https://github.com/chucknorris/roundhouse/wiki/CustomCreateDatabase&quot;&gt;creates databases if they do not exist&lt;/a&gt; at the start of a migration. When working with Azure SQL, this creates a &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/sql-database/sql-database-single-database&quot;&gt;single database&lt;/a&gt; on the connected &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/sql-database/sql-database-servers&quot;&gt;database server&lt;/a&gt;. That certainly fits as expected behavior, but if you‚Äôve provisioned an elastic pool on your Azure SQL Server, you‚Äôll find it sadly empty after a first-time migration.&lt;/p&gt;

&lt;p&gt;Databases can be pushed into the pool (not recommended for physical servers) after the fact from the Azure Portal or CLI, but I‚Äôm lazy and would prefer RoundhousE to carry me the whole way through.&lt;/p&gt;

&lt;h2 id=&quot;custom-database-create&quot;&gt;Custom Database Create&lt;/h2&gt;

&lt;p&gt;RoundhousE is as easy to customize as it is to use unconfigured, and provides a flag for overriding the default create database behavior in favor of a  &lt;a href=&quot;https://github.com/chucknorris/roundhouse/wiki/CustomCreateDatabase&quot;&gt;custom script&lt;/a&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-cds&lt;/code&gt;). This script can then leverage the &lt;a href=&quot;https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-database-service-objectives-azure-sql-database&quot;&gt;T-SQL instruction&lt;/a&gt; for &lt;em&gt;where&lt;/em&gt; to create an Azure SQL database: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SERVICE_OBJECTIVE&lt;/code&gt;. We can adapt RoundhousE‚Äôs &lt;a href=&quot;https://github.com/chucknorris/roundhouse/blob/master/product/roundhouse.databases.sqlserver/SqlServerDatabase.cs#L108-L115&quot;&gt;sample custom create script&lt;/a&gt; to set both the service objective and the elastic pool‚Äôs name:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Created&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Created&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;databases&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Created&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SERVICE_OBJECTIVE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELASTIC_POOL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REPLACE_ELASTIC_POOL_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Created&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At runtime, RoundhousE will connect as normal, but will run the above before any migration scripts. The ` {{DatabaseName}} ` token will be filled in automatically, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#REPLACE_ELASTIC_POOL_NAME#&lt;/code&gt; will need to be hard-coded, or better yet plugged by some other process.&lt;/p&gt;

&lt;h2 id=&quot;using-in-a-cicd-pipeline&quot;&gt;Using in a CI/CD Pipeline&lt;/h2&gt;

&lt;p&gt;That works fine for a single elastic pool, but hard-coding names is brittle and may not work across environments. We give the script a little nudge; personally, I use powershell to plug in the elastic pool name from an environment variable, before calling RoundhousE:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$replacedContent&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-Content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$createDbScript&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-replace&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#REPLACE_ELASTIC_POOL_NAME#'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ElasticPoolName&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set-Content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$createDbScript&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Value&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$replacedContent&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$roundhouse_exe_path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MyConnectionString&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./scripts/&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-cds&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$createDbScript&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--env&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--vf&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyApp.dll&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you use other kinds of SQL hosts besides elastic pools, you can set a flag to only conditionally use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-cds&lt;/code&gt; option, or if you prefer writing SQL, knock yourself out on the create script.&lt;/p&gt;

&lt;p&gt;Whether or not you need to get fancy, it‚Äôs important to noodle around with our tools in the face of odd behavior, especially if it allows us to use more ideal technologies.&lt;/p&gt;</content><author><name>Patrick McVeety-Mill</name></author><category term="Cloud" /><category term="azure" /><category term="sql" /><category term="roundhouse" /><summary type="html">Databases are important for most applications, but keeping their schemas consistent across versions and environments can become a sticky date pudding without proper care. Tools like RoundhousE provide streamlined, repeatable, script-based migrations and work like a charm out of the box. If using the very cool and atmospheric Azure SQL Elastic Pools, however, the default behavior lands us adjacent to the pool, not in it. Let‚Äôs not be hasty to abandon database host nor migrator; it‚Äôs easy to correct this with little configuration.</summary></entry><entry><title type="html">Crested Bunting</title><link href="http://loudandabrasive.com/crested-bunting" rel="alternate" type="text/html" title="Crested Bunting" /><published>2019-07-08T18:38:00+00:00</published><updated>2019-07-08T18:38:00+00:00</updated><id>http://loudandabrasive.com/crested-bunting</id><content type="html" xml:base="http://loudandabrasive.com/crested-bunting">&lt;p&gt;&lt;img src=&quot;https://live.staticflickr.com/65535/50775498983_458cfde401_k.jpg&quot; alt=&quot;Sculpture of a crested bird made of black and brown cardboard&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This Himalayan bird was made from a box of Shiner Black lager and a bag from Cavendar‚Äôs Boot city. A bit more detail in this one than any of the birds before it, and the first plumage-heavy crest, too. This was made for a charity auction at work.&lt;/p&gt;

&lt;p&gt;üì∑ Photos taken by &lt;a href=&quot;https://hollymarie.photo/&quot;&gt;Holly Marie Photography&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://live.staticflickr.com/65535/50776256311_7a38311777_k.jpg&quot; alt=&quot;Rear view of the same sculpture&quot; /&gt;
&lt;img src=&quot;https://live.staticflickr.com/65535/50775499143_c3d13d338b_k.jpg&quot; alt=&quot;Detail of the same sculpture&quot; /&gt;&lt;/p&gt;</content><author><name>Patrick McVeety-Mill</name></author><category term="Cardboard" /><summary type="html"></summary></entry><entry><title type="html">Deploying Multiple WebJobs in Azure DevOps</title><link href="http://loudandabrasive.com/deploying-webjobs-in-azure-devops" rel="alternate" type="text/html" title="Deploying Multiple WebJobs in Azure DevOps" /><published>2019-06-20T22:02:00+00:00</published><updated>2019-06-20T22:02:00+00:00</updated><id>http://loudandabrasive.com/deploying-webjobs-in-azure-devops</id><content type="html" xml:base="http://loudandabrasive.com/deploying-webjobs-in-azure-devops">&lt;p&gt;Unsurprisingly, &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/app-service/&quot;&gt;App Services&lt;/a&gt; are one of Azure‚Äôs more useful and persistent offerings. Somewhat surprising (to me at least) is that &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/app-service/webjobs-create&quot;&gt;WebJobs&lt;/a&gt; stand firmly beside them, after seeming like a tack-on, albeit a cool one. The way they are developed has evolved, however, now leveraging the &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/app-service/webjobs-sdk-how-to&quot;&gt;same SDK that Azure Functions is built on&lt;/a&gt;. From a user‚Äôs perspective, WebJobs‚Äô deploy-and-run-time is conversely unchanged. Unfortunately, that means deploying them is primarily advertised as a manual process from Visual Studio, the Azure Portal, or using Powershell. We know better, though, and can integrate WebJobs with our App Services in &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/&quot;&gt;Azure DevOps Pipelines&lt;/a&gt;, even if we‚Äôre straying from the happy path.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;single-job-per-project&quot;&gt;Single Job per Project&lt;/h2&gt;

&lt;p&gt;The preferred and straightforward way of developing and deploying WebJobs is &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/app-service/webjobs-dotnet-deploy-vs&quot;&gt;&lt;em&gt;very&lt;/em&gt; straightforward&lt;/a&gt;, but comes with some stipulations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;WebJobs are built alongside a web app&lt;/li&gt;
  &lt;li&gt;WebJobs are C# console app projects&lt;/li&gt;
  &lt;li&gt;WebJobs are 1:1 project-to-job&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Put differently: while you can have as many WebJobs as you like, each must be distinct, and its own console app project. The solution with the jobs also contains a web app project that will be built and released with them. If this fits your needs, CONGRATULATIONS; simply add the &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.Web.WebJobs.Publish/&quot;&gt;Microsoft.Web.WebJobs.Publish&lt;/a&gt; Nuget package to each console app, and include a simple &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/app-service/webjobs-dotnet-deploy-vs#publishsettings&quot;&gt;JSON file&lt;/a&gt; that details the job‚Äôs settings. That‚Äôs it! Your WebJobs will be published with the web app and run when you deploy to App Services.&lt;/p&gt;

&lt;h2 id=&quot;multiple-jobs-for-the-same-project&quot;&gt;Multiple Jobs for the Same Project&lt;/h2&gt;

&lt;p&gt;Running multiple instances of a WebJob can be effective for replicating a process over different data sources, running on different schedules, or even to scale without &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/app-service/overview-hosting-plans&quot;&gt;paying for more VMs&lt;/a&gt;. While it seems &lt;em&gt;easiest&lt;/em&gt; to do this by uploading .zip files and configuring through the Azure Portal, we value repeatability and parity between the jobs. Thankfully, we have a way. WebJobs‚Äô aforementioned unchanged under-the-hood is &lt;a href=&quot;https://github.com/projectkudu/kudu/wiki/WebJobs&quot;&gt;Project Kudu&lt;/a&gt;: the Swiss Army knife &lt;strong&gt;K&lt;/strong&gt; from the App Service &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Advanced Tools&lt;/code&gt; menu in the Azure Portal. Among lots of nit-grit in the documentation is this non-obvious detail about how WebJobs run:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Jobs are deployed by copying them to the right place in the file-system‚Ä¶&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;To deploy a triggered job copy your binaries to: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d:\home\site\wwwroot\app_data\jobs\triggered\{job name}&lt;/code&gt;
To deploy a continuous job copy your binaries to: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d:\home\site\wwwroot\app_data\jobs\continuous\{job name}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microsoft.Web.WebJobs.Publish&lt;/code&gt; package includes the magic instructions to publish jobs to these folders, but we can do this manually using a powershell and a couple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env&lt;/code&gt; variables in our Pipeline:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$WEBJOB_PUBLISH_PATH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# pipeline variable: location of published or extracted console app artifact&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$APP_SERVICE_ROOT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# pipeline variable: location to stage the whole app service for deployment&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$KUDU_MAGIC_PATH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$APP_SERVICE_ROOT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/app_data/jobs/continuous&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# or /triggered&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Copy-WebJobRuntime&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$webjobName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Copy-Item&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$WEBJOB_PUBLISH_PATH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Destination&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$KUDU_MAGIC_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$webjobName&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Recurse&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Copy-WebJobRuntime&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-webjob-1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Copy-WebJobRuntime&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-webjob-2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After copying the jobs into their magic folders, we can deploy the application in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$AppServiceRoot&lt;/code&gt; either with &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/azure-rm-web-app-deployment&quot;&gt;the pipeline deploy task&lt;/a&gt; or more powershell. The Webjobs will go with it, appearing in the Azure Portal or Kudu Advanced Tools as if we had deployed any other way.&lt;/p&gt;

&lt;h3 id=&quot;configuring-individual-jobs&quot;&gt;Configuring Individual Jobs&lt;/h3&gt;

&lt;p&gt;App configuration can throw a wrench into our process when we have different WebJobs to deploy. Settings set at the App Service level will apply to &lt;em&gt;all&lt;/em&gt; jobs. This becomes problematic for the replicated-job-per-data-source use case, among others. The solution is to change the individual app settings &lt;strong&gt;files&lt;/strong&gt;, which remain unique so long as they aren‚Äôt overridden by the App Service:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ConfigureWebjob-Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$webjobName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$queueName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$webjob_settings_path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Join-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$KUDU_MAGIC_PATH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$webjobName&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./appsettings.json'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#this is PS6, use [IO.Path]::Combine if you're old school&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$webjob_settings&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-Content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$webjob_settings_path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConvertFrom-Json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write-Host&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Configuring &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$webjob_name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; to watch &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$queueName&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$webjob_settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;QueueToWatch&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$queueName&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$webjob_settings&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConvertTo-Json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set-Content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$webjob_settings_path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigureWebjob-Queue&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-webjob-1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;queue1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigureWebjob-Queue&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-webjob-2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;queue2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, we assume the only difference between the jobs is which queue they monitor. This method gets complex with more settings, or increased variability between jobs. Thankfully, app settings consistent across WebJobs can be set on the App Service like normal. Using a prefix-based naming convention with pipeline variables and WebJob names can also ease pain and reduce the amount of hard-code in the deploy step. See my &lt;a href=&quot;/configuring-docker-with-env-files-written-from-azdo-variables&quot;&gt;post on .env files with pipelines variables&lt;/a&gt;) for such an approach for varying docker containers. With the right conventions it‚Äôs possible to even dynamically create all WebJobs from an array of names configured in the pipeline.&lt;/p&gt;

&lt;h2 id=&quot;look-before-you-leap&quot;&gt;Look Before You Leap&lt;/h2&gt;

&lt;p&gt;Before running down the ‚ÄúMultiple Jobs‚Äù path, consider if &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-compare-logic-apps-ms-flow-webjobs&quot;&gt;WebJobs are really right choice&lt;/a&gt; for the problem you‚Äôre solving. Just because powershell and Azure Pipelines afford us the ability to configure Webjobs in ths way doesn‚Äôt mean it‚Äôs ideal. In fact, in many cases I‚Äôd say it‚Äôs &lt;em&gt;not&lt;/em&gt;. Even so, whether you‚Äôre running one or one hundred Webjobs, it‚Äôs hard to argue against repeatable machine-driven processes. Ditch the manual portal upload and get automated!&lt;/p&gt;</content><author><name>Patrick McVeety-Mill</name></author><category term="Cloud" /><category term="azure-dev-ops" /><category term="azure" /><category term="webjobs" /><category term="powershell" /><summary type="html">Unsurprisingly, App Services are one of Azure‚Äôs more useful and persistent offerings. Somewhat surprising (to me at least) is that WebJobs stand firmly beside them, after seeming like a tack-on, albeit a cool one. The way they are developed has evolved, however, now leveraging the same SDK that Azure Functions is built on. From a user‚Äôs perspective, WebJobs‚Äô deploy-and-run-time is conversely unchanged. Unfortunately, that means deploying them is primarily advertised as a manual process from Visual Studio, the Azure Portal, or using Powershell. We know better, though, and can integrate WebJobs with our App Services in Azure DevOps Pipelines, even if we‚Äôre straying from the happy path.</summary></entry><entry><title type="html">Configuring Docker with Env Files Written from Azure DevOps Variables</title><link href="http://loudandabrasive.com/configuring-docker-with-env-files-written-from-azdo-variables" rel="alternate" type="text/html" title="Configuring Docker with Env Files Written from Azure DevOps Variables" /><published>2019-03-26T19:53:00+00:00</published><updated>2019-03-26T19:53:00+00:00</updated><id>http://loudandabrasive.com/configuring-docker-with-env-files-written-from-azdo-variables</id><content type="html" xml:base="http://loudandabrasive.com/configuring-docker-with-env-files-written-from-azdo-variables">&lt;p&gt;I‚Äôve become a big fan of &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/&quot;&gt;Azure DevOps Pipelines&lt;/a&gt;. It‚Äôs a powerful and robust tool that enables really slick automated build and release processes. I wrote last about &lt;a href=&quot;/effective-nuget-versioning-in-azure-devops&quot;&gt;sexy auto-semversioning Nuget libraries&lt;/a&gt; using Build Pipelines. I‚Äôm still no expert in AzDO but am continuing to extend and improve the ways we leverage it. Recently I found a way to optimize against one of release pipelines‚Äô biggest annoyances: app configuration for ‚Äúnon-transformable‚Äù config formats such as environment variables for Docker containers. &lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Deploy tools like Azure DevOps Pipelines or &lt;a href=&quot;https://octopus.com/&quot;&gt;Octopus Deploy&lt;/a&gt; allow setting environment- and process- scoped variables to be plugged into an application as it‚Äôs deployed. This can be a huge boon: it keeps secrets out of source control, enables sharing config values where convenient, and creates a single source-of-truth for the configuration of released applications. Often, the properly scoped variables are plugged in via file transforms or the a hosting platform automatically. By ‚Äúnon-transformable‚Äù config formats, I mean ones the toolset does not update in this fashion.&lt;/p&gt;

&lt;p&gt;For our system, this comes up most with ‚Äúvanilla‚Äù Docker containers running on a VM: no Kubernetes, no cloud container instances, not even &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose&lt;/code&gt;, despite how these might ease orchestration. This is straightforward to set up in a release pipeline, either with the built-in &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/Docker?view=azure-devops#run-command&quot;&gt;Docker task&lt;/a&gt; or, in our case, calling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker&lt;/code&gt; cli explicitly. We do this via a powershell script to enable looping to ‚Äúscale‚Äù to a configured number of containers during a release. The following configuration technique became an obvious fit for this low-orchestration script or the built-in Docker task, however you may find it useful even with Kubernetes, Docker Swarm, or docker-compose‚Äôd services. Likewise, it can apply to other configuration formats that don‚Äôt fit into a tool‚Äôs ‚Äúmagic update‚Äù paradigm.&lt;/p&gt;

&lt;h2 id=&quot;more-work-more-problems&quot;&gt;More Work More Problems&lt;/h2&gt;

&lt;p&gt;For Docker, there are &lt;a href=&quot;https://docs.Docker.com/engine/reference/commandline/run/#set-environment-variables--e---env---env-file&quot;&gt;a few options&lt;/a&gt; for passing configuration to a container at runtime, specifically as environment variables, which are then &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.configuration.environmentvariablesextensions.addenvironmentvariables?view=aspnetcore-2.2&quot;&gt;scooped up by the application&lt;/a&gt; at startup. Settings could also be transformed on a config file directly at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker build&lt;/code&gt;-time, but this eliminates the visibility into what is set with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker inspect&lt;/code&gt; or a similar tool. Unfortunately, none of these methods fit particularly well with Azure DevOps‚Äôs release pipeline variables.&lt;/p&gt;

&lt;p&gt;Initially, we opted to set variables that needed updating individually in our script with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-e&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--env&lt;/code&gt;) flag:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;80:5000&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;my.api&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;`
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ConnectionStrings__AzureStorage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ConnectionStrings__AzureStorage&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serilog__Properties__Environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Serilog__Properties__Environment&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myregistry/my.api:2.11.2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This was fine for one or two variables, but it got out of hand as the variable changed and grew. Besides setting the variables in the app and pipeline, each addition or removal required an update to the pipeline‚Äôs step(s), or a code change if the script was committed to the repository. As a lazy and typo-prone developer myself, this was totally unsustainable.&lt;/p&gt;

&lt;h2 id=&quot;paring-to-prefixes&quot;&gt;Paring to Prefixes&lt;/h2&gt;

&lt;p&gt;Now, instead of having the variable written in so many places, we leverage the list of all variables to our benefit. During an Azure DevOps Pipeline release, all scoped custom and built-in variables become environment variables on the agent. This is logged during the ‚ÄúInitialize job‚Äù step (some omitted for brevity):&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;Environment variables available are below.  Note that these environment variables can be referred to in the task (in the ReleaseDefinition) by replacing &quot;_&quot; with &quot;.&quot; e.g. AGENT_NAME environment variable can be referenced using Agent.Name in the ReleaseDefinition:
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;        [AGENT_DEPLOYMENTGROUPID] --&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;84]
&lt;span class=&quot;gp&quot;&gt;        [AGENT_HOMEDIRECTORY] --&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;/home/myteam/azagent/azagent]
&lt;span class=&quot;gp&quot;&gt;        [AGENT_OS] --&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Linux]
&lt;span class=&quot;gp&quot;&gt;        [AGENT_VERSION] --&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2.148.1]
&lt;span class=&quot;gp&quot;&gt;        [API_AUTHENTICATION__ENABLED] --&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;        [API_AUTHENTICATION__PASSWORD] --&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;AxjnxkekzDcaW8lwgKz/W8jdKXl68yUl/ATGqxOeeEs&lt;span class=&quot;o&quot;&gt;=]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The last two in this list, prefixed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API_&lt;/code&gt;, are &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/release/variables#custom-variables&quot;&gt;custom variables set in the pipeline&lt;/a&gt;. The prefix in the key is important, as it allows separation of custom variables from Azure DevOps‚Äôs built-in ones. In powershell, given all environment variables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;env:*&lt;/code&gt; and a relevant &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$prefix&lt;/code&gt;, we can extract only those we‚Äôve deemed to be set on the application config and write them to a file as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KEY=VALUE&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$myEnvironmentFilePath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# find, create, or clean file&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;ForEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-ChildItem&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;StartsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add-Content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$myEnvironmentFilePath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;getting-fancy&quot;&gt;Getting Fancy&lt;/h3&gt;

&lt;p&gt;If a pipeline relates to more than one application (or container), it‚Äôs possible to iterate over a set of prefixes, including a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHARED_&lt;/code&gt; one that all apps should pull in. Prefixes can be used to represent other scopes like machine kind, or release purpose, enabling a level of configuration specificity beyond just environment. It may serve to set the list of prefixes themselves as a pipeline variable that you can update at release-time to change config for special cases.&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#env:PREFIXES = API_,SHARED_,LOAD_TEST_&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefixes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PREFIXES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;ForEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-ChildItem&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$matchedPrefix&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;ForEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefixes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;StartsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$matchedPrefix&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$matchedPrefix&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-ne&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#continue as above...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the file has been fully written, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run&lt;/code&gt; call changes from listing all variables with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-e&lt;/code&gt; to the much more concise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--env-file&lt;/code&gt;. If the call is in the same script as the config creation (or set as another pipeline variable), we can avoid hard-coding the environment file path:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;80:5000&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;my.api&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--env-file&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$myEnvironmentFilePath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myregistry/my.api:2.11.2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;other-applications&quot;&gt;Other Applications&lt;/h2&gt;

&lt;p&gt;Besides Docker &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.env&lt;/code&gt; files, this method of iteration and prefixed extraction can be applied to plugging values into placeholders in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ini&lt;/code&gt; files, adding rows to an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xml&lt;/code&gt; config, or changing up a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt; object. Before getting out your big paintbrush, though, communicate with your team and agree on a standard for applying these. Save a baseline as a reference Task Group, or a shared script in a repository, and document it. As in software development, patterns are only useful when they‚Äôre followed, and should be scrutinized as they are applied to new situations.&lt;/p&gt;</content><author><name>Patrick McVeety-Mill</name></author><category term="DevOps" /><category term="azure-dev-ops" /><category term="docker" /><category term="configuration" /><category term="powershell" /><summary type="html">I‚Äôve become a big fan of Azure DevOps Pipelines. It‚Äôs a powerful and robust tool that enables really slick automated build and release processes. I wrote last about sexy auto-semversioning Nuget libraries using Build Pipelines. I‚Äôm still no expert in AzDO but am continuing to extend and improve the ways we leverage it. Recently I found a way to optimize against one of release pipelines‚Äô biggest annoyances: app configuration for ‚Äúnon-transformable‚Äù config formats such as environment variables for Docker containers.</summary></entry><entry><title type="html">Nuget Package Versioning in Azure DevOps with GitVersion</title><link href="http://loudandabrasive.com/effective-nuget-versioning-in-azure-devops" rel="alternate" type="text/html" title="Nuget Package Versioning in Azure DevOps with GitVersion" /><published>2019-01-22T22:21:00+00:00</published><updated>2019-01-22T22:21:00+00:00</updated><id>http://loudandabrasive.com/effective-nuget-versioning-in-azure-devops</id><content type="html" xml:base="http://loudandabrasive.com/effective-nuget-versioning-in-azure-devops">&lt;p&gt;If you blinked last year (or &lt;a href=&quot;/incoming-at-updates&quot;&gt;hiked the Appalachian trail&lt;/a&gt;) you may have missed Microsoft‚Äôs big continuous integration service redesign and rebranding; from Visual Studio Team Services to &lt;a href=&quot;https://dev.azure.com&quot;&gt;&lt;em&gt;Azure DevOps&lt;/em&gt;&lt;/a&gt;. I‚Äôve had the surprising pleasure to work extensively on the platform since returning; migrating my client‚Äôs CI/CD operations over to build and release pipelines in Azure DevOps. So far, it has been a dream, especially compared to my past experiences with VSTS. Microsoft‚Äôs &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/&quot;&gt;documentation&lt;/a&gt; on Azure DevOps is fantastic, and I‚Äôm not looking to reinvent any wheels. Instead, I‚Äôll share a success we‚Äôve had with managing internal Nuget packages.&lt;!--more--&gt; These code libraries are used to ease and enforce communication between services in a distributed system that are sourced from multiple git repositories. It‚Äôs challenging enough planning and coordinating releases between versions of the services themselves; our client libraries should be easy to publish and even easier to track. Here are our goals:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;version numbering is automatic, &lt;em&gt;but can be overridden&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;new production-ready versions are pushed automatically, &lt;em&gt;but anything can be pushed manually&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;source git repository is marked per each new release using tags, &lt;em&gt;no exceptions&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mis-en-place&quot;&gt;&lt;em&gt;Mis en place&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;The source of our Nuget package is written in dotnet core, and includes two projects: a C# class library that includes the consumable code, and another C# class library that has our unit tests. To keep things straightforward, our example repository is dedicated to this nuget package, with a simple branching strategy: a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; mainline, with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature/*&lt;/code&gt; branches to allow working on concurrent changes. To prepare Azure DevOps, we‚Äôll complete &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/get-started-yaml&quot;&gt;this guide&lt;/a&gt;: connect our GitHub account, select this repository, and create a new &lt;strong&gt;build pipeline&lt;/strong&gt; with a blank &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yaml&lt;/code&gt; template to instruct its behavior.&lt;/p&gt;

&lt;h2 id=&quot;set-the-version&quot;&gt;Set the Version&lt;/h2&gt;

&lt;p&gt;First, we‚Äôll define and set the version. To achieve our goal of automatic version-numbering, we‚Äôll use &lt;a href=&quot;https://github.com/GitTools/GitVersion&quot;&gt;GitVersion&lt;/a&gt;. GitVersion is a command line utility that leverages a repository‚Äôs commit history to generate a &lt;a href=&quot;https://gitversion.readthedocs.io/en/latest/reference/intro-to-semver/&quot;&gt;semantic version number&lt;/a&gt;. It‚Äôs highly configurable, with a variety of modes to accommodate different branching and release strategies. We‚Äôve got it easy, with just one mainline (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;), which is a perfect fit for the &lt;a href=&quot;https://gitversion.readthedocs.io/en/latest/reference/mainline-development/&quot;&gt;Mainline Development mode&lt;/a&gt;. This will increment the &lt;em&gt;patch&lt;/em&gt; part for every merge into master (1.0.1 -&amp;gt; 1.0.2). We can override this behavior with magic phrases in our commit messages, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+semver: minor&lt;/code&gt;, to bump the &lt;em&gt;minor&lt;/em&gt; part (1.0.1 -&amp;gt; 1.1.0) or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+semver: skip&lt;/code&gt; to not increment at all (1.0.1 -&amp;gt; 1.0.1). In every GitVersion mode, &lt;strong&gt;tags are truth&lt;/strong&gt;. Tagging a commit on master with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v#.#.#&lt;/code&gt; will reset the baseline calculation regardless of what came before it. All these options are succinctly defined in a &lt;strong&gt;GitVersion.yml&lt;/strong&gt; file, which for us is pleasantly boring:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# GitVersion.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Mainline&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;ignore&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sha&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you‚Äôre building on a Windows-based &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted&quot;&gt;build agent&lt;/a&gt;, there is a VSTS extension for GitVersion. We‚Äôre hep, though, and using Linux with dotnet core, so it doesn‚Äôt work. Instead, we‚Äôll create steps to pull the tool from Nuget, and then call the executable using mono. We‚Äôll specify we‚Äôre running GitVersion for CI with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/output buildserver&lt;/code&gt; option, which both changes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Build.BuildNumber&lt;/code&gt; to match the version, and exposes a collection of version-related &lt;a href=&quot;https://gitversion.readthedocs.io/en/latest/more-info/variables/&quot;&gt;variables&lt;/a&gt;. The one we care about now is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GitVersion.NuGetVersion&lt;/code&gt;. Here‚Äôs what our azure-pipelines.yml looks like:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: For all our YAML steps, I‚Äôve excluded the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;displayName&lt;/code&gt; option for brevity, but would highly encourage using it at home.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# azure-pipelines.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;vmImage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Ubuntu&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;16.04'&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NuGetCommand@2&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;custom&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;install GitVersion.CommandLine -Version 4.0.0 -OutputDirectory $(Build.BinariesDirectory)/tools -ExcludeVersion&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mono $(Build.BinariesDirectory)/tools/GitVersion.CommandLine/tools/GitVersion.exe /output buildserver /nofetch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;do-the-work&quot;&gt;Do the Work&lt;/h2&gt;

&lt;p&gt;The meat of our automated build is typical for a sexy modern .NET core project. After we set the version we‚Äôll compile, run tests, and package our consumable library.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# azure-pipelines.yml, continued&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dotnet build ./MyLibrary.sln -c Release /p:Version='$(GitVersion.NuGetVersion)'&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dotnet test ./src/MyLibraryTests/MyLibraryTests.csproj -c Release --no-build&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dotnet pack ./src/MyLibrary/MyLibrary.csproj -c Release --no-build -o '$(build.artifactStagingDirectory)'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This option during compilation is noteworthy: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/p:Version='$(GitVersion.NuGetVersion)'&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/p:&lt;/code&gt; flag is for MSBuild parameters (woof); here we‚Äôre setting built assemblies to use our automatically defined version. By using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--no-build&lt;/code&gt; flag on subsequent steps, we lock in the results of this initial compilation. We output our packaged library to the built-in staging location on the agent with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$(build.artifactStagingDirectory)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are &lt;em&gt;lots&lt;/em&gt; of variations on this. For instance, we could set the project to automatically publish when it compiles, with the version set to the environment variable in the .csproj, or instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;script:&lt;/code&gt; steps we could leverage &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core-cli?view=vsts&quot;&gt;Task&lt;/a&gt; helpers. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pack&lt;/code&gt; command task even includes an option to set the package version by environment variable, like we‚Äôre doing here already.&lt;/p&gt;

&lt;h2 id=&quot;publish-the-result&quot;&gt;Publish the Result&lt;/h2&gt;

&lt;p&gt;After we‚Äôve verified our code compiles, passes our tests, and packages nicely, we‚Äôll push it to a Nuget feed to be then consumed. Azure DevOps includes a private Nuget feed in the form of &lt;a href=&quot;https://azure.microsoft.com/en-us/services/devops/artifacts/&quot;&gt;Azure Artifacts&lt;/a&gt;, but you could just as easily publish your package to Nuget.org, ProGet, or any other feed. The Nuget pipeline task has a seamless option for integrating with Azure Artifacts, requiring only the magic identifier of the feed; using an internal authorization. Regardless of what hosts our feed, we‚Äôll save the connection info in our pipeline as a variable to keep it secret, and allow reuse between our pipelines. Here‚Äôs our new step:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# azure-pipelines.yml, continued again&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NuGetCommand@2&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;push'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;packagesToPush&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$(build.artifactStagingDirectory)/**/MyLibrary*.nupkg'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;publishVstsFeed&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$(ARTIFACT_FEED_ID)'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq('true', variables['FORCE_PUSH_NUGET']))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unlike previous steps, this one is &lt;em&gt;conditional&lt;/em&gt;. We don‚Äôt want to push a new package every time new code is pushed to the repository, especially for in-flight work. First, our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;condition:&lt;/code&gt; checks that previous steps succeeded. Then, we check if we‚Äôre on the master branch, which we trust is production-ready, or if a special flag to ‚Äòforce‚Äô a new release has been set. To do this, we create a variable called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FORCE_PUSH_NUGET&lt;/code&gt; in the pipeline settings that is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; by default, and settable at queue-time (below, top). This variable will then appear when a new build is being queued (below, bottom).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-resources/2019-01-22-effective-nuget-versioning-in-azure-devops-1-variable-setup.jpg&quot; alt=&quot;A screenshot showing setting up a variable named FORCE_PUSH_NUGET in a build pipeline's settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-resources/2019-01-22-effective-nuget-versioning-in-azure-devops-2-queue-build.jpg&quot; alt=&quot;A screenshot showing the queue build dialog with the FORCE_PUSH_NUGET variable set to 'true'&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When a package is pushed in this way, the automatically generated version will reflect that this is from a feature branch by appending a &lt;em&gt;-tag&lt;/em&gt; (1.0.1 -&amp;gt; 1.0.1-my-feature-branch) to the version, and Nuget will flag it as prerelease. This way, users can deliberately use this version, but we minimize accidental pulls from upgrading or installing the package new.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-resources/2019-01-22-effective-nuget-versioning-in-azure-devops-3-package-list.jpg&quot; alt=&quot;A screenshot of the Azure Artifact feed, showing the list of packages and their corresponding versions&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tag-the-repo&quot;&gt;Tag the Repo&lt;/h2&gt;

&lt;p&gt;Now that the Nuget package is live, we want our consumers to be able to look up &lt;em&gt;what exactly&lt;/em&gt; they‚Äôve signed up for. This could be out of curiosity, for feature requests, or more likely, because &lt;strong&gt;something is wrong&lt;/strong&gt;. Since we‚Äôre using GitVersion, users &lt;em&gt;could&lt;/em&gt; work their way backwards to a specific commit, but because we‚Äôre empathy-driven, we‚Äôll make it easy to look up by adding a &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Basics-Tagging&quot;&gt;git tag&lt;/a&gt; that matches the version of this release. There are a few extensions that provide this functionality in Azure DevOps, but we‚Äôll go with &lt;a href=&quot;https://github.com/mikaelkrief/GitHub-Tools-vsts-extensions/wiki/Tag-GitHub-source-code&quot;&gt;this one&lt;/a&gt; for our example. Using our &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/github&quot;&gt;GitHub connection&lt;/a&gt; from that starting guide, it infers the source repository and adds a tag we specify. The step ends up looking like this:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# azure-pipelines.yml, continued one more time&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;KriefMikael.githubtools.GitHubTag.GitHubTag@1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;githubEndpoint&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myGithubConnection&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;v$(GitVersion.NuGetVersion)'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq('true', variables['FORCE_PUSH_NUGET']))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here again we have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;condition:&lt;/code&gt; from the push step, since we only want to tag when we publish a new package. We also see our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GitVersion.NuGetVersion&lt;/code&gt; variable in action again, prepended with ‚Äòv‚Äô to be clear what the number means. It may seem excessive to tag every release, when we release on every merge into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;. Tags guarantee users will be able to pair a package‚Äôs behavior to source code, however, especially when we‚Äôre lazy about release notes. As a bonus, GitVersion works faster, since counting commits takes time. The latest tag serves as the starting point for calculating the next version, so it never has to count very high. Tags can be viewed from the command line with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git tag -l&lt;/code&gt;, where they can also be checked out (in a detached HEAD), but they‚Äôll also be visible in GitHub:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-resources/2019-01-22-effective-nuget-versioning-in-azure-devops-4-github-tags.jpg&quot; alt=&quot;A screenshot of a GitHub repository with the &amp;quot;tags&amp;quot; dropdown open, showing a list of version tags&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;now-you&quot;&gt;Now You&lt;/h2&gt;

&lt;p&gt;This example is pretty minimal, and might not match how you or your team organizes code or releases. This pattern can be adapted for a second mainline to release from, other versioning strategies, or push frequencies. Change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GitVersion.yml&lt;/code&gt; config and the conditions for pushing new packages to match your needs. The &lt;em&gt;how&lt;/em&gt; of this is less important than the &lt;em&gt;why&lt;/em&gt;: We use these tools (continuous integration, Nuget, GitVersion) to make our lives, and the lives of those we work with, easier. Release often, tag your repository for visibility, and automate as much as you can, and you can take comfort in knowing you probably helped someone today.&lt;/p&gt;</content><author><name>Patrick McVeety-Mill</name></author><category term="DevOps" /><category term="azure-dev-ops" /><category term="nuget" /><category term="git" /><summary type="html">If you blinked last year (or hiked the Appalachian trail) you may have missed Microsoft‚Äôs big continuous integration service redesign and rebranding; from Visual Studio Team Services to Azure DevOps. I‚Äôve had the surprising pleasure to work extensively on the platform since returning; migrating my client‚Äôs CI/CD operations over to build and release pipelines in Azure DevOps. So far, it has been a dream, especially compared to my past experiences with VSTS. Microsoft‚Äôs documentation on Azure DevOps is fantastic, and I‚Äôm not looking to reinvent any wheels. Instead, I‚Äôll share a success we‚Äôve had with managing internal Nuget packages.</summary></entry><entry><title type="html">AT Day 185: One Hundred Miles to Summit</title><link href="http://loudandabrasive.com/day-185-one-hundred-miles-to-summit" rel="alternate" type="text/html" title="AT Day 185: One Hundred Miles to Summit" /><published>2018-09-26T03:43:00+00:00</published><updated>2018-09-26T03:43:00+00:00</updated><id>http://loudandabrasive.com/day-185-one-hundred-miles-to-summit</id><content type="html" xml:base="http://loudandabrasive.com/day-185-one-hundred-miles-to-summit">&lt;p&gt;It‚Äôs been a hot minute or three since I‚Äôve emailed you. It would be easy to assume, as with previous updates, I‚Äôve been to busy &lt;em&gt;walking&lt;/em&gt; to get my thoughts together. At first I did not want to write this final post, but over time I realized it was unfair to leave my story without an end.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;We were late to leave Monson; first thinking our lax pace might suddenly disappear, but instead getting sucked into Shaw‚Äôs hostel. In addition to trail siblings from miles gone by (Wizard, Spinelli, Crazy Moon, and Beagle), we reunited with Newt, an extended Snooze Crew-zer from our canoe trip. Giggles also met her name-sister. There were three ‚ÄúGiggleses‚Äù on trail; first ours, then one who renamed herself to ‚ÄúElmo‚Äù after hearing there were two others, and the third initially very far behind, then far ahead after the canoe trip. Their paths had never crossed. The meeting was at the opposite end than reuniting with old friends. After overhearing something, she turned to say, ‚ÄúOh, &lt;em&gt;you‚Äôre&lt;/em&gt; the other Giggles. I was hoping to go the whole trail without meeting you.‚Äù I wish our Giggles had bit back, ‚ÄúI would have said the same thing, if I had known you were such a &lt;strong&gt;bitch&lt;/strong&gt;‚Äù, but she‚Äôs far too nice. In the meantime, she‚Äôs renamed herself ‚ÄúGigs‚Äù to make sure there‚Äôs absolutely no confusion.&lt;/p&gt;

&lt;p&gt;After a sumptuous pancake breakfast, we were dropped off at the 100-Mile Wilderness. These last miles of trail are isolated, splendid, and difficult. Its terrain, lack of road crossings (read: resupply points) demanded carrying extra pounds and a hard pace, lest we run out of food in the middle of nowhere. Despite the extra challenge, many of us had been looking forward to this section. I had first heard of how amazing it was back in Franklin, NC; the mirror end of where we hiked now. It was bewildering to consider how quickly 100 miles on the trail passed to only 100 miles left. In addition to too much food, I carried two extra rolls of toilet paper to deliver to Wizard and Spinelli, who left the morning of our afternoon. The wilderness delivered; a summating coda to an experience that is already so hard to describe. We spent the first few days stopping often, and gorging on the food we did not want to carry. Water was mostly plentiful, and pleasant to rest at. Like New Hampshire, this area would be swarming with black flies and mosquitos in the summer, but it had sufficiently cooled to make our airspace clear, but turn would-be swimming holes undesirable. That didn‚Äôt stop us from dilly-dallying. We called our little gang ‚ÄúPenis Wings,‚Äù for the Little Tommy Terror song. It was the perfect tune: upbeat and silly, but full of shouting anguish. Penis Wings felt like a group of old friends on a camping trip: myself, Gigs, Sparrow, Scatter, Scissors, and Newt. We seemed to forget the months, or the thousands of miles behind us; just a quick jaunt in the beautiful and unreachable Maine wilderness. I never got that TP to Wizard and Spinelli. Let‚Äôs pray tonight, for their butts.&lt;/p&gt;

&lt;p&gt;Slacking off created a looming threat of needing to push miles to finish on time (Scatter and I had flights to catch!), but we soon hit much more tangible trouble. The purported most difficult day of this section had three peaks on it, and as we crossed each one the weather seemed to worsen. By the time we reached ‚ÄúWhitecap,‚Äù the last mountain before Katahdin, we were spread out, and each experienced a different form of storm: rain, sleet, hail, or snow, all in 90 mile per hour winds. The ground was littered with rigid, melon-sized rocks that would be hard to pass normally, let alone with body-knocking wind. Some of us lost our pack covers, some of us crawled, but we all made it. I was at the back of the bus, with the extreme wind turning gentle flurries into a frigid, loose but blinding curtain of snow, tiptoeing over the rocks and praying I would not break my ankle. I struggle to think of a more dangerous experience in my life, but time, care, and strong legs prevailed. That night, for the second time, I slept in a bathroom. The shelter below the peak was full, and after Scissors was nearly hit by a healthy tree‚Äôs branch being torn off by the wind while setting up her tent, we decided the spacious, ADA-compliant privy seemed like a good option. It was new, smelling more of lumber than shit, and slept four cozily. These trials were met equally, maybe even outdone, by the trail magic we found. The 100 Mile Wilderness was isolated, but connected by lakes and logging roads. Some canoers had brought with a grill and steaks to put on it, with booze and gallons of filtered water to wash it down. They shared readily; we had a big fire at a beautiful camp on the water, and in the morning they let us take from their unneeded leftover supplies. The next morning, some retirees that owned a camp up one of the few private roads were cooking homemade donuts, with a big pot of hot coffee. The canoers left us beer at another road on their way out of the wilderness. What treats.&lt;/p&gt;

&lt;p&gt;There are so many reasons people came to the trail. For many hikers, this is their first foray into the woods, and they were eagerly looking ahead to the end, some even wishing to never backpack again. I was not one of those. To be embedded in nature so consistently, and for so long was a major draw for me. It‚Äôs no surprise then, the day before summiting Katahdin was one of my most emotionally taxing. I spent much of it alone, often teary-eyed, thinking of how it was the last day I would stop somewhere different than I had started. My oneness with the woods made the end feel like an injustice; I was a part of this thing now, to remove me would be like to take a babe from its mother‚Äôs arms. It‚Äôs a selfish thought; the woods will go on as if I was never there, but it took a lot of heavy sighs, time beside waterfalls, and walking beneath the full moon to get over the idea that my hike was ended. I wrote in my last shelter log entry that the summit is like the heel of bread: it‚Äôs not important, but you can‚Äôt bake a loaf without it. It was a cold slog up to the top, one of the most challenging climbs, going hand-over-foot, up rebar ladders and around tall rocks. The wind up high was fast, and cold, with icicles forming on the famous sign. We hid behind a large rock, to stay out of the wind, snacking and shivering till we were all at the top. The unpleasant conditions couldn‚Äôt keep us from taking our photos, though realizing my vision of myself lounging atop the sign in my shorts and Hawaiian shirt was made a more painful experience. Our group photo at the summit was a mooning; a final celebratory and encompassing symbol of our time on the trail. It was a solidary act, to show the strength of our bond, with sculpted bottoms testament to the physical effort, and to prove adversity is always met with unfaltering tenacity: proud, defiant, and laughing.&lt;/p&gt;

&lt;p&gt;I found myself regretting that I did not have the foresight to skip some other section. Maine was so beautiful; maybe the Snooze Crew was right to skip back in Shenandoah. The feeling passed, as I realized I would not be the person I am here experiencing this end, had it not been for those days alone, or those days with others: The one-on-one time with Uncle Ya, the slow unspoken joining of &lt;strong&gt;MOTHRA SQUAD&lt;/strong&gt;, or the instant friendships with Snooze and Koozie Crews. Had I not skipped, I would have missed Penis Wings; I might have even had the misfortune of good weather on Katahdin. All these moments and every in-between shaped my hike. It was experience unlike any other; so wholely indescribable, so incredible, and so subtly influential. Or maybe not so subtly.&lt;/p&gt;

&lt;p&gt;See you soon,&lt;br /&gt;
Boogerbear&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read the Rest!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/day-0-the-approach&quot;&gt;Day 0: The Approach&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/day-13-first-zero&quot;&gt;Day 13: First ‚ÄúZero‚Äù in Franklin, NC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/day-27-exiting-the-great-smoky-mountains&quot;&gt;Day 27: Exiting The Great Smoky Mountains&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/day-49-welcome-to-virginia&quot;&gt;Day 49: Welcome to Virginia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/day-77-more-virginia-but-not-the-same&quot;&gt;Day 77: More Virginia But Not The Same&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/day-102-definitely-the-last-update-from-virginia&quot;&gt;Day 102: Definitely The Last Update From Virginia &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/day-122-and-the-states-won't-stop&quot;&gt;Day 122: And The States Won‚Äôt Stop (But I Might Here And There) &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/day-140-new-jersey-new-york-new-england&quot;&gt;Day 140: New Jersey - New York - New England &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/day-159-return-of-the-climb&quot;&gt;Day 159: Return of the Climb &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/day-177-difficult-trail-and-more-difficult-decisions&quot;&gt;Day 177: Difficult Trail and More Difficult Decisions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;/day-185-one-hundred-miles-to-summit&quot;&gt;Day 185: One Hundred Miles to Summit&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Patrick McVeety-Mill</name></author><category term="Thru-Hike" /><category term="appalachian trail" /><summary type="html">It‚Äôs been a hot minute or three since I‚Äôve emailed you. It would be easy to assume, as with previous updates, I‚Äôve been to busy walking to get my thoughts together. At first I did not want to write this final post, but over time I realized it was unfair to leave my story without an end.</summary></entry></feed>